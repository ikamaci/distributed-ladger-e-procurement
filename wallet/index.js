const ChainUtil = require('../chain-util');
const { INITIAL_BALANCE } = require('../config');
const Transfer = require('./transfer');

class Wallet{
    /**
     * the wallet will hold the public key
     * and the private key pair
     * and the balance
     */
    constructor(){
        this.balance = INITIAL_BALANCE;
        this.keyPair = ChainUtil.genKeyPair();
        this.publicKey = this.keyPair.getPublic().encode('hex');
        this.files = []
    }

    toString(){
        return `Wallet - 
        publicKey: ${this.publicKey.toString()}
        files  : ${this.files}`
    }

    sign(dataHash){
        return this.keyPair.sign(dataHash);
    }

    /**
     * combines the functionality to create a new transaction
     * update a transaction into one and also update the transaction
     * pool if the transaction exists already.
     */

    createTransfer(recipient,UBLFile,blockchain, transferPool){

        // creates a new transaction and updates the transaction pool
        let transfer = Transfer.newTransfer(this,recipient,UBLFile);
        transferPool.updateOrAddTransfer(transfer);

        return transfer;

    }

    /**
     * updates the balance of the wallet
     * based on the latest transaction
     */

    calculateBalance(blockchain){
        
        // store the existing balance
        let balance = this.balance;

        // create an array of transactions
        let transactions = [];

        // store all the transactions in the array
        blockchain.chain.forEach(block => block.data.forEach(transaction =>{
            transactions.push(transaction);
        }));

        // get all the transactions generated by the wallet ie money sent by the wallet
        const walletInputTransactions = transactions.filter(transaction => transaction.input.address === this.publicKey);

        // declare a variable to save the timestamp
        let startTime = 0;

        if(walletInputTransactions.length > 0){

            // get the latest transaction
            const recentInputTransaction = walletInputTransactions.reduce((prev,current)=> prev.input.timestamp > current.input.timestamp ? prev : current );
            
            // get the outputs of that transactions, its amount will be the money that we would get back
            balance = recentInputTransaction.outputs.find(output => output.address === this.publicKey).amount

            // save the timestamp of the latest transaction made by the wallet
            startTime = recentInputTransaction.input.timestamp
        }

        // get the transactions that were addressed to this wallet ie somebody sent some moeny
        // and add its ouputs.
        // since we save the timestamp we would only add the outputs of the transactions recieved
        // only after the latest transactions made by us

        transactions.forEach(transaction =>{
            if(transaction.input.timestamp > startTime){
                transaction.outputs.find(output=>{
                    if(output.address === this.publicKey){
                        balance += output.amount;
                    }
                })
            }
        })
        return balance;

    }
    getAllSentFiles(blockchain){

        // store the existing balance
        let files = this.files;

        console.log("blockchain lenght", blockchain.length)

        // create an array of transactions
        let transfers = [];

        // store all the transactions in the array
        blockchain.chain.forEach(block => block.data.forEach(transaction =>{
            transfers.push(transaction);
        }));

        // get all the transactions generated by the wallet ie money sent by the wallet
        const walletSentTransfers = transfers.filter(transaction => transaction.address === this.publicKey);

        // declare a variable to save the timestamp
        let startTime = 0;

        return walletSentTransfers;



    }

    getAllReceivedFiles(blockchain){

        // store the existing balance
        let files = this.files;

        // create an array of transactions
        let transfers = [];

        // store all the transactions in the array
        blockchain.chain.forEach(block => block.data.forEach(transaction =>{
            transfers.push(transaction);
        }));

        // get all the transactions generated by the wallet ie money sent by the wallet
        const walletReceivedTransfers = transfers.filter(transaction => transaction.recipient === this.publicKey);

        // declare a variable to save the timestamp
        let startTime = 0;

        return walletReceivedTransfers;


    }

    static blockchainWallet(){
        const blockchainWallet = new this();
        blockchainWallet.address = 'blockchain-wallet';
        return blockchainWallet;
    }
}

module.exports = Wallet;
